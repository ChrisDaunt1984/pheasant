import nbformat

from ..jupyter.exporter import run_and_export
from ..markdown.convert import fenced_code_convert


def convert(source: str) -> tuple:
    """Return (title, content) from #Code <title>."""
    source = source.strip()
    if source.startswith('['):
        index = source.index(']')
        reference, title = source[1:index], source[index + 1:].strip()
    else:
        reference, title = None, source

    content = inspect_source(reference) if reference else None
    return title, content


def inspect_source(reference: str) -> str:
    """Inspect source code."""
    name, *options = reference.split(' ')
    name, *line_range = name.split(':')

    cell = nbformat.v4.new_code_cell(f'inspect.getsourcelines({name})')
    source = run_and_export(cell, inspect_export)
    cls = 'pheasant-fenced-code pheasant-jupyter-source'
    content = f'<div class="codehilite {cls}"><pre>{source}</pre></div>'
    content = f'#begin\n{content}\n#end'
    return content


def inspect_export(cell) -> str:
    """Convert a cell generated by inspection into markdown."""
    for output in cell['outputs']:
        if 'data' in output and 'text/plain' in output['data']:
            lines, lineno = eval(output['data']['text/plain'])
            source = ''.join(lines)
            source = f'```python\n{source}```'
            return fenced_code_convert(source, only_code=True)
            break
    else:
        return ''
